// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  points        Int       @default(5) // Points par défaut pour les nouveaux utilisateurs
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  articles      Article[]
  comments      Comment[]
  ratings      Rating[]
  notifications Notification[]
  
  @@map("users")
}

model Article {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  imageUrl    String?
  published   Boolean   @default(false)
  authorId    String    @db.ObjectId
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
  ratings     Rating[]
  notifications Notification[]
  
  @@map("articles")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String   @db.ObjectId
  articleId String   @db.ObjectId
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  author    User     @relation(fields: [authorId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])
  
  @@map("comments")
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  value     Int      // 1-5 étoiles
  authorId  String   @db.ObjectId
  articleId String   @db.ObjectId
  createdAt DateTime @default(now())
  
  // Relations
  author    User     @relation(fields: [authorId], references: [id])
  article   Article  @relation(fields: [articleId], references: [id])
  
  @@unique([authorId, articleId])
  @@map("ratings")
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    ContactStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("contacts")
}

model Newsletter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@map("newsletters")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // Type de notification (ARTICLE_PUBLISHED, etc.)
  title     String
  message   String
  userId    String   @db.ObjectId
  articleId String?  @db.ObjectId
  sentTo    Int      @default(0)
  failedTo  Int      @default(0)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  article   Article? @relation(fields: [articleId], references: [id])
  
  @@map("notifications")
}

enum UserRole {
  USER
  ADMIN
}

enum ContactStatus {
  PENDING
  PROCESSED
  CLOSED
}
